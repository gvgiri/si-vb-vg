create a pod using the k cli
create a deployment using k cli
create a service of type clusterip using cli
create a nodeport service exposing the deployment
create a namespace
switch to the namespace
create cm in that namespace - using envFrom
create cm in that namespace - using env
create cm in that namespace as a volume
create secret in that namespace - using envFrom
create secret in that namespace - using env
create secret in that namespace as a volume

create a deployment nginx-deploy, replicas 2, mount volume /var/www/nginx.  Pass a config map "myname=jordan" to this deployment

now, update the deployment to nginx:1.16
next, update the deployment to nginx:1.17
now rollback to nginx:1.16


create a deployment with 2 containers, 1 nginx and second container as busybox

create pv and pvc <<--THIS IS WHEN I NEED TO USE THE DOCUMENTATION
create a pod and mount the above pvc
delete the pod

create a Persistent Volume called log-volume. It should make use of a storage class name manual. It should use RWX as the access mode and have a size of 1Gi. The volume should use the hostPath /opt/volume/nginx
Next, create a PVC called log-claim requesting a minimum of 200Mi of storage. This PVC should bind to log-volume.
Mount this in a pod called logger at the location /var/www/nginx. This pod should use the image nginx:alpine.

create a pod called time-check in the dvl1987 namespace. This pod should run a container called time-check that uses the busybox image.
	1.	Create a config map called time-config with the data TIME_FREQ=10 in the same namespace.
	2.	The time-check container should run the command: while true; do date; sleep $TIME_FREQ;done and write the result to the location /opt/time/time-check.log.
	3.	The path /opt/time on the pod should mount a volume that lasts the lifetime of this pod.
  
Create a new deployment called nginx-deploy, with one single container called nginx, image nginx:1.16 and 4 replicas. The deployment should use RollingUpdate strategy with maxSurge=1, and maxUnavailable=2.
Next upgrade the deployment to version 1.17 using rolling update.
Finally, once all pods are updated, undo the update and go back to the previous version.
 
Create a redis deployment with the following parameters:
Name of the deployment should be redis using the redis:alpine image. It should have exactly 1 replica.
	The container should request for .2 CPU. It should use the label app=redis.
It should mount exactly 2 volumes:
Make sure that the pod is scheduled on master node.


create 3 pods - using nginx as the image, calling them pod1, pod2, pod3
label pod1 as app=web
lable pod2 as app=appl
label pod3 as app=db

allow ingress for app=db only from app=appl
allow ingress for app=appl only from app=web

This is test Giri
